<html>
<head><title>SAFS Release Notes 2003.12.19</title></head>
<body>
<a name="top" />
<h1><center>
SAFS Release Notes<br/>
RRAFS and the Shared SAFS Framework<br/>
2003.12.19</center></h1>

<p>
<a href="#definitions">Definitions</a>,&#032;<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#safstools">SAFS Tools</a>,&#032;<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;

<hr/>
<a name="definitions" />
<p>
<h3><b>Definitions:</b><br/></h3>
<table border=0 cellspacing=7 >
<tr><td><b>
SAFS</b><td><b>
Software Automation Framework Support</b>
<tr><td><b>
SAFS Engine</b><td>
A Data Driven Engine implemented using SAFS
<tr><td><b>
RRAFS<br/>RRAFS Engine</b><td>
A SAFS Engine for Rational Robot
<tr><td><b>
RobotJ Engine<br/>SAFS/RobotJ</b><td>
A SAFS Engine for Rational RobotJ/XDE Tester
<tr><td><b>
SAFS/DriverCommands</b><td>
A SAFS Engine for tool-independent Driver Commands
<tr><td><b>
Home Page</b><td><a href="http://safsdev.sourceforge.net" target="reference">
SAFSDEV on Sourceforge</a>
</table>

<hr/>
<a name="reminders" />
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#safstools">SAFS Tools</a>,&#032;<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>CRITICAL REMINDERS</h3>

<b>Robot Scripts may need to be recompiled.</b><br/>
All existing RRAFS Robot scripts that reference or INCLUDE any part of this framework may need to be recompiled.
<p>
Normally, a quick File->Batch Compile of GUI Scripts within Robot will take care of this.  You must do this in each project that uses the framework.  If you had any custom libs that referenced the framework then they too may need to be recompiled with File->Batch Compile SQABasic Library sources.
<p>
<b>INSTALL OVERWRITES!</b><br/>
If you have never installed RRAFS or SAFS before, then this doesn't apply to you.<br/>
If you installed but never modified any of the files, then this doesn't apply to you.  But you may want to review the mentioned files "just in case".
<p>
Affected customizable files from previous releases:<br/>
<ul>
<li>RRAFS.INI
<li>RRAFS Custom Extension Libraries
<li>Any modifications in &lt;SAFS>\bin\ batch files (*.bat or *.vbs).
</ul>
<p>    
If you have taken advantage of any of the customization capabilities of this framework, then you must take some simple precautions prior to installing this new release.  Installing a new version of the framework will install new, default versions of these files.
<p>
<b>RRAFS.INI</b><br/>
Essentially, you must make a backup of any RRAFS.INI in your Rational install directory (DDE_RUNTIME) if you have made customizations by modifying settings; then evaluate how and if you want to merge with the new file.
<p>
<b>Custom Extensions</b><br/>
Backup any Custom Extension libraries in which you have implemented customizations.  
Users who have implemented customizations in older versions of those libraries can then overwrite the newly installed files with those older versions.  This effectively reinserts your customizations into the new version of the framework.
<p>
<b>SAFS Batch Files</b><br/>
If you have previously installed the SAFS Framework separately--such as when it was offered via a supplemental Patch in Oct 2003--then you may have manually modified batch files or VBS script(s) to handle custom project paths.  You will need to backup modified files and evaluate how and if you want to merge such changes with the new files.
<p>
Failure to perform any of these prescribed backups may render your prior customizations nonexistent.  Hopefully, you have backed them up somewhere already as part of your normal ongoing activities.  Right?!
<p>
Consult <a href="http://safsdev.sourceforge.net/sqabasic2000/UsingCustomExtensions.htm" target="reference">
Using Custom Extensions</a> for additional information on Custom Extensions with this framework. This HTML doc is also provided in your RRAFS install directory.

<hr/>
<a name="safstools"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>SAFS Tools in the Framework</h3>
The shared SAFS framework is tool-independent and provides the first of many building blocks for future tool-independent enhancements for all SAFS Engines.
<p>
Both Rational Robot Classic and Rational RobotJ can independently use the new SAFS framework.  And through the new framework Robot Classic can provide Driver functionality to RobotJ--effectively allowing us to take advantage of both tools simultaneously.
<p>
You can also use separate tools to control RobotJ or the new SAFS/DriverCommands engine.  These controllers are independent of Robot Classic or any other vendor tool.
<p>
The new SAFS pieces are implemented using <a href="http://staf.sourceforge.net" target="reference">STAF Technology</a> and have been developed in Java.  Use the STAF Technology link for more information on STAF and how it can be used even outside of our SAFS testing framework.
<dl><dt>
<b>SAFSVARS</b> -- Truly Global Variables (DDVariables)
<p><dd>
Any number of tools or processes can get and set DDVariable values those values will be shared by all processes and tools on the machine.  Thus, Rational Robot can set values that RobotJ can read.  WinRunner, SilkTest, and even a human sitting at a command prompt have access to these values.  These values should also be available even to remote machines that are also running the underlying STAF software.  And like the existing Robot Classic implementation, the SAFSVARS service will perform "lookthru" to the SAFSMAPS service to look for "Application Constants".
<p></dd><dt>
<b>SAFSMAPS</b> -- Truly Global Application Maps
<p><dd>
Tool-independent handling and processing of SAFS Application Maps.  This service can open and expose Application Map data to all tools and processes wishing to access the data.  Robot Classic, RobotJ, 
a human at a command prompt can all interrogate App Maps--even from remote machines that are also running the underlying STAF software. Like the existing Robot Classic implementation, the SAFSMAPS service will perform SAFSVARS lookups when component recognition strings are actually stored in global variables (via DDV: constant, as always).
<p></dd><dt>
<b>SAFSLOGS</b> -- Truly Global Logging
<p><dd>
Any number of tools or processes can now log to the same running test log.  The SAFSLOGS service supports both the TEXT and XML log formats familiar with RRAFS users.  In addition, SAFSLOGS exchanges information with the tool clients (Robot Classic, RobotJ, etc.) so that modes like logging to the tools' consoles and tool log formats can be enabled or disabled as we have done in the past.  Also, by using standard STAF LOG services, the user has access to the running log and can view log information even while the test is in-progress.  The log need not be local to the machine running the tests.
<p></dd><dt>
<b>SAFS/DriverCommands</b> -- SAFS Engine for Tool-independent Driver Commands
<p><dd>
Any number of tools or processes can now execute Driver Commands.  This can even be done interactively from a CMD prompt, or batch processors, or GUI programs developed for such interaction.  SAFS/DriverCommands is effectively another engine sitting in the STAF world waiting for any tool or process to give it a command to execute.  It is the first vendor-independent engine in the arsenal.  
It requires neither Robot Classic nor RobotJ/XDE Tester.
<p></dd><dt>
<b>SAFS/RobotJ</b> -- SAFS Engine for Rational RobotJ (XDE Tester)
<p><dd>
In addition to the above, this release contains the Java code allowing us to use Rational RobotJ as the first SAFS Engine that was fully SAFS-enabled.  In other words, Rational RobotJ connects to the new SAFS framework and can be controlled by *ANY* driver that conforms to the framework protocol.
<p>This type of SAFS-enabled Engine does not care who is sending it test records to process.  It simply processes the test records and returns the results to the caller.  This will allow a SAFS-enabled Engine to focus more on implementing Component Functions and Driver Commands and less on rebuilding the entire SAFS Engine infrastructure.
</dl>

<hr/>
<a name="instructions"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>Installation Instructions</h3>

<dl><dt>
<b>Review Backup Reminders in <a href="#reminders">Critical Reminders</a></b>
<p><dd>
If you have not done so, review the <a href="#reminders">Critical Reminders</a> concerning backups of locally modified or customized files from previous releases.  I'd hate to say, "I told ya so."
<p></dd><dt>
<b>Uninstall Previous RRAFS Release:</b>
<p><dd>
Installations of RRAFS Release 2003.01.27 (Jan 2003) and earlier installed via the Windows Installer .MSI need to uninstall that release before installing this new one.  You must do this to avoid unexpected backward versioning that can occur if the Windows Installer update or repair feature is ever invoked.
<p>
RRAFS Release 2003.08.27 (Aug 2003) and later do not have this uninstall requirement as we implemented the ability to patch and install on top of releases using different technologies.
<p>
Uninstall <b>SAFS Engine for Rational Robot</b> from the Windows Control Panel "Add/Remove Programs" application if present.
<p><dt>
<b>Short-N-Sweet install instructions:</b><br/>
Also reference: <a href="http://safsdev.sourceforge.net/sqabasic2000/DDEngineSetup.htm" target="reference">Engine Setup</a> available in your install directory.
<p>
Per the Engine Setup doc, a Java JVM and Windows Scripting Host V5.6 or later is required.  Refer to the <a href="http://safsdev.sourceforge.net/sqabasic2000/DDEngineSetup.htm#installtools" target="reference">Engine Setup Tools</a> section for more details and install information for those tools.
<p><dd>
<ol>
<li><b>Extract RRAFS2003.12.19.ZIP into the RRAFS DDE_RUNTIME directory.</b><br/>
Extract all files of the ZIP file into your .\Rational\Rational Test\sqabas32 directory (a.k.a. DDE_RUNTIME).
<p>
<ul>
<li><b>DO NOT Extract using foldernames.</b>  All files extracted into this one directory.
<li><b>Overwrite Existing Files</b> if a previous release exists.
</ul>
<p>
<li><b>Run the extracted "Setup.vbs" script.</b><br/>
In Windows Explorer, locate "Setup.vbs" in that directory and double-click to execute it.
<p>
<li><b>Setup Rational Robot Playback per DDEngineSetup</b><br/>
Verify/Complete any Robot Playback Options setup per the DDEngineSetup doc mentioned in the following section.
<p>
<li><b>Setup Rational RobotJ/XDE Tester per DDEngineSetup</b><br/>
Verify/Complete any RobotJ setup per the DDEngineSetup doc mentioned in the following section.
</ol>
</dl>
<p>
<b>Setup.vbs</b> should take care of all DLL registration and placement required by the RRAFS Engine.  The user still must ensure any Environment Variables and Robot options are set per the DDEngineSetup doc.  In fact, the Installer even provides compiled Robot code (SBX) into the DDE_RUNTIME directory so that most users can jump right in without having to compile the library source.  Users with incompatible versions of the Robot compiler (pre-V2001, I think) will need to recompile the source for their older version of Robot.
<p>
<b>Setup.vbs</b> will also install the MSXSL.EXE utility used for XML\XSL transformations.  However, the Installer does not install ExamDiff or any other Diff Viewer to take advantage of that new capability. (See the Setup doc for more information.)
<p>
(Note: the MSXSL.EXE installed is the pre-msxml4 version.  You can download a later version from microsoft.com. The latest version from Microsoft purportedly will not work with pre-msxml4 versions of msxml.)
<p>
<b>Setup.vbs</b> will not install any program that will appear in Control Panel's "Add/Remove Program" application.
<p>

<hr/>
<a name="setupnotes"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>Additional Setup Notes and Information</h3>

Additional notes and instructions for this release can be found via the links below.  These are generally reviewed in the listed order.  The files are contained in the downloaded installation ZIP file and available once all contents of the ZIP file are extracted into the install directory.  
(The links to these will work once unzipped locally.)
<p>
<table border=0 cellspacing=7 >
<tr><td>
<a href="SetupSAFS.README.htm" target="reference">
SetupSAFS.README</a><td>
Install STAF and SAFS Services
<tr><td>
<a href="SetupRobotJ.README.htm" target="reference">
SetupRobotJ.README</a><td>
Setup RobotJ to use STAF and SAFS Services
<tr><td>
<a href="SetupRuntime.README.htm" target="reference">
SetupRuntime.README</a><td>
Runtime Setup for Testing
</table><p>

<hr/>
<a name="robotjnotes"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;<a href="#setupnotes">Setup Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>SAFS/RobotJ Support Notes</h3>

Currently, there is a large array of Component Function libraries and commands supporting the testing of Java applications.  The testing of HTML clients is not yet flushed out as deeply as Java clients.  Work is ongoing to add more features for both Web and Java testing.
<p>
RobotJ can support all of the Driver Commands made available by the SAFS/DriverCommands engine.  If SAFS/DriverCommands is not running for some reason, those Driver Commands will be supported by RobotJ.
<p>
Keep in mind that the current implementation is for Robot Classic to be the Driver for RobotJ.  This means ALL of the Component Functions and Driver Commands already available via Robot Classic are fully supported.  RobotJ provides some overlap for these commands, but it also provides some new commands not available in Robot Classic.  This actually means that development of new commands or features can be developed in either Robot Classic or RobotJ--whichever is more comfortable to the developer.
<p>

<hr/>
<a name="comments"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;<a href="#setupnotes">Setup Notes</a>,&#032;
<a href="#robotjnotes">RobotJ Notes</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>Additional Comments</h3>

Some comments about ongoing development...
<p>
The underlying code and documentation for the SAFS engines (SAFS/RobotJ and SAFS/DriverCommands) might still be consider "Beta" by some standards.  Some of the code is tool-independent.  Some is the required Rational implementation of abstract, tool-independent code.  It is getting better every day!
<p>
The RobotJ engine works very well.  It is actually being used for production testing on several projects.  But it still needs to get a little more polished, and definitely needs more user/developer documentation--and we are working on that.
<p>
Releasing the enhanced SAFS framework does not jeapardize your existing tests.  Existing tests will still work as they always did.  You do not have to use any of the new features provided by the new engines; and we continue to iron out issues as we find them. 
<p>

<hr/>
<a name="newstuff"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;<a href="#setupnotes">Setup Notes</a>,&#032;
<a href="#robotjnotes">RobotJ Notes</a>,&#032;<a href="#comments">Comments</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<p>
<h3>New Stuff</h3>

There have been a great many enhancements done since the last release--even though that was only 4 months ago!  This includes large and subtle enhancements and keyword additions in various libraries and utilities in RRAFS.  Most notable, but not all-inclusive is:
<ul>
<li>ComboListBoxFunctions
<li>GenericMasterFunctions
<li>ListBoxFunctions
<li>ListViewFunctions
<li>TreeViewFunctions
<li>DDDriverCommands
<li>DDDriverFileCommands
<li>DDDriverFlowCommands
<li>DDDriverStringCommands
<p>
<li>DDUtilities
<li>DDGUIUtilities
<li>DDVariabelStore
<li>LogUtilities
<li>SAFSUtilities
<li>STAFUtilities
<li>StepDriver
</ul>
<p>
Of course, the ability to use the new SAFS tools and either(or both) of the SAFS/DriverCommands or SAFS/RobotJ Engines is more tightly integrated into this new codebase.  And we are still working to make that even more streamlined and automatic.
<p>

<hr/>
<a name="oldstuff"/>
<small>
<a href="#top">Back2Top</a>,&#032;<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;<a href="#safstools">SAFS Tools</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;<a href="#comments">Comments</a>,&#032;
<a href="#newstuff">New Stuff</a>,&#032;
</small>
<p>
<h3>Old Stuff</h3>

<b>Older Notes That Are Still Important and Applicable:</b>
<p>
If you do download Web or CVS updates regularly, or even daily, you can keep your RRAFS Action Map up-to-date by replacing it with the one generated daily at:
<p>
<a href="http://safsdev.sourceforge.net/source/rrafs/libraries/doc/XSLComponentActions.zip" target="reference">RRAFS Component Actions</a>
<p>
As user who do these frequent updates must surely know, the extracted file goes into the DDE_RUNTIME directory overwriting the existing file of the same name.  (Actually, the daily updating mentioned has recently broken.  However, when we fix it, everything above will be true :)
<p>
<b>Important XML Logging Information For Older Scripts:</b>
<p>
The addition of XML Logging in Oct 2002 to LogUtilities will impact scripts whose LogFacility (usually MainLog) is initialized enabling all logs with <code>MAX_LOGMODE</code>.  A script enabling individual logs with values like <code>TEXTLOG_ENABLED, SQALOG_ENABLED, CONSOLE_ENABLED</code>, or any combination of these should not be affected.
<p>
The issue is that <code>MAX_LOGMODE</code> will automatically enable the new XML Log.  However, the script will not have one or more other function calls to effectively handle that XML log once 
the test is complete.  For example, existing scripts will likely close the logs enabled with <code>MAX_LOGMODE</code> via the <code><i>CloseTextLogs</i></code> function.  
<p>
<b><code>CloseTextLogs</code> does not close XML logs.<br/>The new "close all" function needs to be <code>CloseAllLogs</code>.</b>
<p>
To retain existing log behavior in existing scripts with the smallest script modification would be to <b>replace</b> each instance of <code>MAX_LOGMODE</code> in these scripts <b>with</b> the binary equivalent that does NOT include the new XML logging:
<p><pre>

   <b><code>(TEXTLOG_ENABLED OR SQALOG_ENABLED OR CONSOLE_ENABLED)</code></b>

</pre>
No other script modification should be required.
<p>
<dl>
<dt><b>Q: So, what happens if I don't make this change in my scripts and the XML logs are enabled by MAX_LOGMODE?</b>
<p>
<dd>Your script should function just fine as it always did.  However, the framework will enable a default XML log for each test run.  At the end of each test run, the log may remain open unless your script performs a "Reset" subroutine call.  The log will also likely close when Robot is shutdown or other times that Robot would try to shutdown its File IO.
<p>
However, the framework logging is always done in APPEND mode.  Each new test run APPENDS to any log of the same name that was not renamed or deleted prior to initializing the Log Facility.  Since your existing script does not know about the new default XML log being created, it will not attempt to delete the XML log from previous runs.  Thus, you will be growing a nice, large, LONG XML log history of every test run by all scripts that launched a test using MAX_LOGMODE.
<p>
<dt><b>Q: How can I modify my existing scripts to *properly* take advantage of this new XML logging?</b>
<p>
<dd>Folks do different things in their scripts to initialize the logs and run the tests.  I can't possibly address all possibilities here.  However, some general guidelines for modifying existing scripts are below.
<p>
<ol>
<li>Provide a unique XML log name just as with the Text log.
<li>Delete the previous XML log just as you do the Text log.
<li>CloseALLLogs instead of only CloseTextLogs
<li>"Cap" the XML log with appropriate HEADERS and FOOTERS.
</ol>
</dl>
<p>
<b>Example modified Robot script code including all XML handling:</b>
<code><pre>
    ....

    'setup lognames, delete previous logs, initialize new logs
    MainLog.logid = "MyImportantTestLog"    
    logfile = GetDDELogsDirectory() & MainLog.logid
    on error resume next
    kill logfile &".txt"
    kill logfile &".xml"
    on error goto 0
    
    'caution, resource intensive and new log formats automatically enabled
    InitLogFacility MAX_LOGMODE, MainLog

    &lt;... any other script code and running the test ...>
    
    'close the logs
    CloseAllLogs MainLog, 1
    LUCapXMLLog Mainlog.xmllog
    Reset

    'view the text log at the end of the test
    StartApplication "notepad.exe "& MainLog.textlog

    ....
</pre></code>
<p><hr/>
<small>
<a href="#definitions">Definitions</a>,&#032;<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#safstools">SAFS Tools</a>,&#032;<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Setup Notes</a>,&#032;<a href="#robotjnotes">RobotJ Notes</a>,&#032;
<a href="#comments">Comments</a>,&#032;<a href="#newstuff">New Stuff</a>,&#032;
<a href="#oldstuff">Old Stuff</a>,&#032;
</small>
<pre>
Carl Nagle, <a href="http://www.sas.com" target="reference">SAS</a>
Project Manager, <a href="http://safsdev.sourceforge.net" target="reference">SAFSDEV</a>
<a href="mailto:safsdev@sas.com" target="reference">safsdev@sas.com</a>
</pre></body></html>
